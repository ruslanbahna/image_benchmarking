name: Java Workflow

on:
  push:
    branches:
      - main

jobs:
  test-21-ubuntu:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/openjdk/jdk:21-ubuntu

    steps:
    - name: Display container size before installation
      run: |
        echo "Container size before installation:"
        du -sh /
      
    - name: Install wget and JAR file
      run: |
        start_time=$(date +%s)
        apt-get update && apt-get install -y --no-install-recommends wget
        wget --quiet https://github.com/renaissance-benchmarks/renaissance/releases/download/v0.15.0/renaissance-gpl-0.15.0.jar
        end_time=$(date +%s)
        elapsed_time=$((end_time - start_time))
        echo "Time taken: $elapsed_time seconds"

    - name: Display container size after installation
      run: |
        echo "Container size after installation:"
        du -sh /
   
    - name: Check if JAR file exists
      run: |
        if test -f renaissance-gpl-0.15.0.jar; then
          echo "JAR file exists."
        else
          echo "JAR file not found."
          exit 1
        fi

    - name: Display size of JAR file
      run: |
        jar_size_kb=$(du -k renaissance-gpl-0.15.0.jar | cut -f1)
        echo "Size of JAR file: $jar_size_kb KB"

    - name: Check installed packages (excluding JAR file) and their size
      run: |
        num_installed_packages=$(dpkg -l | grep ^ii | grep -v renaissance-gpl-0.15.0.jar | wc -l)
        echo "Number of installed packages (excluding JAR file): $num_installed_packages"

        installed_packages_size=$(dpkg-query -Wf '${Installed-Size}\n' | grep -v renaissance-gpl-0.15.0.jar | awk '{sum+=$1} END{print sum}')
        echo "Total size of installed packages (excluding JAR file): $installed_packages_size KB"
        
  #   - name: Build Java runtime with jlink
  #     run: |
  #       jlink \
  #         --add-modules java.base \
  #         --strip-debug \
  #         --no-man-pages \
  #         --no-header-files \
  #         --compress=2 \
  #         --output /javaruntime

  #   - name: Set up environment
  #     run: |
  #       echo "PATH=$PATH:/javaruntime/bin" >> $GITHUB_ENV

  #   - name: Run Renaissance benchmark
  #     run: |
  #       java -jar renaissance-gpl-0.15.0.jar functional
   
  # test-eclipse-temurin-21:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: eclipse-temurin:21

  #   steps:
  #   # - name: Install wget
  #   #   run: |
  #   #     apt update
  #   #     apt install -y wget

  #   - name: Download Renaissance Suite JAR file
  #     run: |
  #       wget https://github.com/renaissance-benchmarks/renaissance/releases/download/v0.15.0/renaissance-gpl-0.15.0.jar -O renaissance-gpl-0.15.0.jar

  #   - name: Build Java runtime with jlink
  #     run: |
  #       jlink \
  #         --add-modules java.base \
  #         --strip-debug \
  #         --no-man-pages \
  #         --no-header-files \
  #         --compress=2 \
  #         --output /javaruntime

  #   - name: Set up environment
  #     run: |
  #       echo "PATH=$PATH:/javaruntime/bin" >> $GITHUB_ENV

  #   - name: Run Renaissance benchmark
  #     run: |
  #       java -jar renaissance-gpl-0.15.0.jar functional
           
  # test-eclipse-temurin-21-alpine:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: eclipse-temurin:21

  #   steps:
  #   # - name: Install wget
  #   #   run: |
  #   #     apt update
  #   #     apt install -y wget

  #   - name: Download Renaissance Suite JAR file
  #     run: |
  #       wget https://github.com/renaissance-benchmarks/renaissance/releases/download/v0.15.0/renaissance-gpl-0.15.0.jar -O renaissance-gpl-0.15.0.jar

  #   - name: Build Java runtime with jlink
  #     run: |
  #       jlink \
  #         --add-modules java.base \
  #         --strip-debug \
  #         --no-man-pages \
  #         --no-header-files \
  #         --compress=2 \
  #         --output /javaruntime

  #   - name: Set up environment
  #     run: |
  #       echo "PATH=$PATH:/javaruntime/bin" >> $GITHUB_ENV

  #   - name: Run Renaissance benchmark
  #     run: |
  #       java -jar renaissance-gpl-0.15.0.jar functional
                   
  # test-21-mariner:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: mcr.microsoft.com/openjdk/jdk:21-mariner

  #   steps:
  #   - name: Install binutils
  #     run: |
  #       sed -i 's/gpgcheck=1/gpgcheck=0/' /etc/yum.repos.d/mariner-extras.repo
  #       sed -i 's/gpgcheck=1/gpgcheck=0/' /etc/yum.repos.d/mariner-microsoft.repo
  #       sed -i 's/gpgcheck=1/gpgcheck=0/' /etc/yum.repos.d/mariner-official-base.repo
  #       yum install -y binutils

  #   - name: Download Renaissance Suite JAR file
  #     run: |
  #         curl -O -L https://github.com/renaissance-benchmarks/renaissance/releases/download/v0.15.0/renaissance-gpl-0.15.0.jar
   
  #   - name: Verify downloaded file
  #     run: |
  #         md5sum renaissance-gpl-0.15.0.jar
        
  #   - name: Build Java runtime with jlink
  #     run: |
  #       jlink \
  #         --add-modules java.base \
  #         --strip-debug \
  #         --no-man-pages \
  #         --no-header-files \
  #         --compress=2 \
  #         --output /javaruntime

  #   - name: Set up environment
  #     run: |
  #       echo "PATH=$PATH:/javaruntime/bin" >> $GITHUB_ENV

  #   - name: Run Renaissance benchmark
  #     run: |
  #       java -jar renaissance-gpl-0.15.0.jar functional
 

  






# name: Renaissance Benchmark

# on:
#   push:
#     branches:
#       - main  # Adjust to your main branch name

# jobs:
#   benchmark:
#     runs-on: ubuntu-latest  # You can specify different OS+JDK combinations here

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Java
#         uses: actions/setup-java@v2
#         with:
#           distribution: 'adopt'  # Choose your desired JDK distribution, e.g., 'adopt' or 'openjdk'
#           java-version: '11'  # Specify the Java version

#       - name: Install Podman
#         run: |
#           sudo apt update
#           sudo apt install -y podman  # Install Podman on Ubuntu, adjust for other Linux distributions

#       - name: Download Renaissance JAR
#         run: |
#           wget https://github.com/renaissance-benchmarks/renaissance/releases/download/v0.15.0/renaissance-gpl-0.15.0.jar -O renaissance-gpl-0.15.0.jar
#         working-directory: ${{ github.workspace }}

#       - name: Debugging - List Working Directory
#         run: ls

#       - name: Debugging - Check File Existence
#         run: test -f renaissance-gpl-0.15.0.jar && echo "File exists" || echo "File does not exist"

#       # - name: Run Renaissance Benchmarks Ubuntu
#       #   run: |
#       #     podman run -d --name jre-container-21-ubuntu mcr.microsoft.com/openjdk/jdk:21-ubuntu /bin/sleep 30
#       #     podman cp renaissance-gpl-0.15.0.jar jre-container-21-ubuntu:/opt/renaissance-gpl-0.15.0.jar
#       #       # Run diagnostics commands to monitor memory usage
#       #     podman exec jre-container-21-ubuntu /bin/bash -c "top -b -n 1"
#       #     podman exec jre-container-21-ubuntu /bin/bash -c "free -m"
#       #     podman exec jre-container-21-ubuntu /bin/bash -c "vmstat 1 5"
#       #     podman exec jre-container-21-ubuntu /bin/bash -c "ps aux --sort=-%mem | head -n 10"
#       #     podman exec jre-container-21-ubuntu /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar future-genetic" || true
#       #     podman start jre-container-21-ubuntu
#       #     podman exec jre-container-21-ubuntu /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar mnemonics" || true
#       #     podman start jre-container-21-ubuntu
#       #     podman exec jre-container-21-ubuntu /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar par-mnemonics" || true
#       #     podman start jre-container-21-ubuntu
#       #     podman exec jre-container-21-ubuntu /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar rx-scrabble"
#       #     podman exec jre-container-21-ubuntu /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar scrabble" || true
#       #     podman start jre-container-21-ubuntu
#       # - name: Generate Renaissance Report
#       #   run: |
#       #     #podman exec jre-container-21-ubuntu /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar report"
#       #     podman stop jre-container-21-ubuntu
     
#       # - name: Run Renaissance Benchmarks Mariner
#       #   run: |
#       #     podman run -d --name jre-container-21-mariner mcr.microsoft.com/openjdk/jdk:21-mariner /bin/sleep 30
#       #     podman cp renaissance-gpl-0.15.0.jar jre-container-21-mariner:/opt/renaissance-gpl-0.15.0.jar
#       #     podman exec jre-container-21-mariner /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar future-genetic" || true
#       #     podman start jre-container-21-mariner
#       #     podman exec jre-container-21-mariner /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar mnemonics" || true
#       #     podman start jre-container-21-mariner
#       #     podman exec jre-container-21-mariner /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar par-mnemonics" || true
#       #     podman start jre-container-21-mariner
#       #     podman exec jre-container-21-mariner /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar rx-scrabble"
#       #     podman exec jre-container-21-mariner /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar scrabble" || true
#       #     podman start jre-container-21-mariner
#       # - name: Generate Renaissance Report
#       #   run: |
#       #     #podman exec jre-container-21-mariner /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar report"
#       #     podman stop jre-container-21-mariner
          
#       - name: Start the container and wait for it to run
#         run: |
#           # Start the JRE container
#           podman run -d --name jre-container-21-distroless mcr.microsoft.com/openjdk/jdk:21-distroless /bin/sleep 30

#           # Start a wait container to ensure jre-container is running
#           podman run --name wait-container -d busybox sh -c "until podman container exists jre-container-21-distroless && podman container inspect jre-container-21-distroless --format '{{.State.Status}}' | grep -q running; do sleep 1; done"
#         shell: bash         
                  
#       - name: Copy files into the container
#         run: |
#           # Copy files into the JRE container
#           podman cp renaissance-gpl-0.15.0.jar jre-container-21-distroless:/opt/renaissance-gpl-0.15.0.jar      
#           podman exec jre-container-21-distroless /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar future-genetic" || true
#           podman start jre-container-21-distroless
#           podman exec jre-container-21-distroless /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar mnemonics" || true
#           podman start jre-container-21-distroless
#           podman exec jre-container-21-distroless /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar par-mnemonics" || true
#           podman start jre-container-21-distroless
#           podman exec jre-container-21-distroless /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar rx-scrabble"
#           podman exec jre-container-21-distroless /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar scrabble" || true
#           podman start jre-container-21-distroless
#       - name: Generate Renaissance Report
#         run: |
#           #podman exec jre-container-21-distroless /bin/bash -c "java -jar /opt/renaissance-gpl-0.15.0.jar report"
#           podman stop jre-container-21-distroless
          
          


#       # - name: Upload Logs
#       #   uses: actions/upload-artifact@v2
#       #   with:
#       #       name: renaissance-logs
#       #       path: |
#       #         future-generic.log
#       #         mnemonics.log
#       #         par-mnemonics.log
#       #         rx-scrabble.log
#       #         scrabble.log
